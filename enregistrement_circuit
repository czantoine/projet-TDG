
import java.io.*; 
import java.util.*; 

class Graph 
{ 
    private int Sommet;  
	private int Arcs;	
    private int[][] graphe; 
	private int [] suicide;
	private  List<List<Integer>> graphcircuit; 
 
    Graph(int v) { 
        Sommet = v; 
        graphe = new int [v][v];
		graphcircuit = new ArrayList<>(v); 
          
        for (int i = 0; i < v; i++) 
            graphcircuit.add(new LinkedList<>()); 
    } 
  
   
    void addEdge(Integer depart,Integer arrivee, int poids) {   //c'est ici que tu dois enregistrer le graphs
        
		graphe[depart][arrivee] = poids;
		graphcircuit.get(depart).add(arrivee);
    } 
	void Statement(int i, int etat)  //1 entree 0 rien -1 sortie PARTIE 2
	{
		suicide[i] = etat;
	}

    
    private boolean isCyclicUtil(int i, boolean[] deja_visite, 
                                      boolean[] pile_recursive) 
    { 
       
        if (pile_recursive[i]) 
        {
            return true; 
        }
  
        if (deja_visite[i]) 
        {
            return false;
        }
              
        deja_visite[i] = true; 
        pile_recursive[i] = true; 
        List<Integer> enfant = graphcircuit.get(i); 
          
        for (Integer c: enfant) 
            if (isCyclicUtil(c, deja_visite, pile_recursive)) 
                return true; 
                  
        pile_recursive[i] = false; 
  
        return false; 
    } 
  
   
    private boolean isCyclic() 
    { 
        
        boolean[] deja_visite = new boolean[Sommet];
		boolean[] pile_recursive = new boolean[Sommet]; 		
        for (int i = 0; i < Sommet; i++) 
            deja_visite[i] = false; 
  
       
        for (int u = 0; u < Sommet; u++) 
            if (!deja_visite[u]) 
                if (isCyclicUtil(u, deja_visite, pile_recursive)) 
                    return true; 
  
        return false; 
    } 
  
    public static void main(String[] args) 
    { 
        Graph graph = new Graph(4); 
        graph.addEdge(0, 1 ,0); 
        graph.addEdge(0, 2 , 0); 
        
      
        graph.addEdge(2, 3, 0); 
       
          
        if(graph.isCyclic()) 
            System.out.println("Le Graphe contient un circuit"); 
        else
            System.out.println("Le Graphes ne contient pas de circuits"); 
    } 
    
   
}  
